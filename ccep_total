# Import necessary libraries
import os
import mne
import pandas as pd
import numpy as np
from matplotlib import colormaps

# paths to mne datasets - FreeSurfer subject
sample_path = mne.datasets.sample.data_path()
subjects_dir = sample_path / "subjects"

ALPHA = 0.0

def main():
    """
    Main function to load the data and plot the electrodes.
    """
    # Load the data
    data, info = load_data()

    # Set the montage
    info = set_montage(info, data)

    # Plot the electrodes
    plot_electrodes(info, data)

def load_data():
    """
    Load the data from the total_activity folder.
    """
    # path to total_activity
    total_activity_path = 'C:/Users/jjbte/Documents/TM3/Afstuderen/Significant_Electrodes/total_activity'

    # Load and concatenate all tsv data files
    data = pd.concat([pd.read_csv(f'{total_activity_path}/{file}', sep='\t') 
                      for file in os.listdir(total_activity_path)])

    # Create info object
    info = mne.create_info(ch_names=data['channel_name'].tolist(), sfreq=2048, ch_types='ecog')
    # # Create raw object
    # raw_ecog = mne.io.RawArray(data_dummy, info)

    # Copy channel names from info to data
    data['channel_name'] = info.ch_names

    return data, info

def set_montage(info, data):
    """
    Set the montage for the raw data.
    """
    # Make electrode postions into a dictionary
    el_position = {row['channel_name']: [row['x'], row['y'], row['z']] for index,
                   row in data.iterrows()}
    # Change position of electrodes to meters
    for key in el_position:
        el_position[key] = [i / 1000 for i in el_position[key]]

    # the coordinate frame of the montage
    montage = mne.channels.make_dig_montage(el_position, coord_frame='mni_tal')
    montage.add_mni_fiducials(subjects_dir)
    info.set_montage(montage)
    
    return info

def plot_electrodes(info, data):
    """
    Function to plot the electrode locations.
    """
    rgba = colormaps.get_cmap("Reds")

    total_brain = mne.viz.get_brain_class()
    brain = total_brain("fsaverage",
                  hemi="both",
                  surf="pial",
                  cortex="grey",
                  subjects_dir=subjects_dir,
                  background="white",
                  interaction="terrain",
                  show=True)
    brain.add_annotation("aparc.a2009s",
                         borders=False,
                         alpha=ALPHA)
    brain.show_view(azimuth=180, elevation=90, focalpoint="auto", distance="auto")
    # Normalize the counts
    data['count'] = data['count'] / data['count'].max()
    # Order the channel_count dataframe so it is in the same order as the raw_ecog
    # data = data.set_index('channel_name').reindex(info.ch_names).reset_index()

    # Map counts to colors
    sensor_colors = np.array(data['count'].map(rgba).values.tolist(), float)

    brain.add_sensors(info,
                      trans="fsaverage",
                      ecog = True,
                      sensor_colors=sensor_colors)
    
if __name__ == "__main__":
    main()